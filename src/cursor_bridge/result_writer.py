"""
Cursor Result Writer - Writes task results back to Cursor workspace
Creates result files and updates source files with completion status
"""

import json
import time
from pathlib import Path
from typing import Dict, Any, Optional, List
import logging


class CursorResultWriter:
    """
    Writes ULTIMA task results back to Cursor workspace.
    Creates result files and updates source comments with status.
    """
    
    def __init__(self, workspace_path: Path, results_dir: Path):
        self.workspace_path = workspace_path
        self.results_dir = results_dir
        self.logger = logging.getLogger("ultima.cursor_result_writer")
        
        # Create results directory
        self.results_dir.mkdir(parents=True, exist_ok=True)
    
    def write_task_result(self, task_id: str, result_data: Dict[str, Any]) -> bool:
        """Write task result to files"""
        try:
            # Create result file
            result_file = self.results_dir / f"result_{task_id}.json"
            
            result_payload = {
                "task_id": task_id,
                "timestamp": time.time(),
                "status": result_data.get("status", "completed"),
                "success": result_data.get("success", True),
                "result": result_data,
                "files_created": result_data.get("files_created", []),
                "message": result_data.get("message", "Task completed successfully")
            }
            
            with open(result_file, 'w') as f:
                json.dump(result_payload, f, indent=2)
            
            self.logger.info(f"Created result file: {result_file}")
            
            # Update source file with completion status
            self._update_source_comment(task_id, result_payload)
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error writing task result {task_id}: {e}")
            return False
    
    def _update_source_comment(self, task_id: str, result_payload: Dict[str, Any]):
        """Update the original source file comment with completion status"""
        try:
            # Load original task to find source file
            task_files = list(Path("detected_tasks").glob(f"task_{task_id}.json"))
            if not task_files:
                self.logger.warning(f"Could not find original task file for {task_id}")
                return
            
            with open(task_files[0], 'r') as f:
                task_data = json.load(f)
            
            source_file = Path(task_data["metadata"]["source_file"])
            source_line = task_data["metadata"]["source_line"]
            
            if not source_file.exists():
                self.logger.warning(f"Source file no longer exists: {source_file}")
                return
            
            # Read source file
            with open(source_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # Update the comment line with status
            if source_line <= len(lines):
                original_line = lines[source_line - 1]
                status_emoji = "✅" if result_payload["success"] else "❌"
                updated_line = f"{original_line.rstrip()} {status_emoji} [COMPLETED: {result_payload['message']}]\n"
                lines[source_line - 1] = updated_line
                
                # Write back to file
                with open(source_file, 'w', encoding='utf-8') as f:
                    f.writelines(lines)
                
                self.logger.info(f"Updated source comment in {source_file}:{source_line}")
            
        except Exception as e:
            self.logger.error(f"Error updating source comment for {task_id}: {e}")
    
    def create_result_summary(self, task_id: str, files_created: List[str], 
                            summary: str, live_url: Optional[str] = None) -> bool:
        """Create a comprehensive result summary file"""
        try:
            summary_file = self.results_dir / f"summary_{task_id}.md"
            
            content = f"""# ULTIMA Task Result Summary

**Task ID**: {task_id}
**Completed**: {time.strftime('%Y-%m-%d %H:%M:%S')}

## Summary
{summary}

## Files Created
"""
            
            for file_path in files_created:
                content += f"- `{file_path}`\n"
            
            if live_url:
                content += f"\n## Live URL\n{live_url}\n"
            
            content += f"""
## How to Use
1. Check the created files in your workspace
2. Review the implementation
3. Test the functionality
4. Deploy or integrate as needed

---
*Generated by ULTIMA - Single Prompt → Complete MVP*
"""
            
            with open(summary_file, 'w') as f:
                f.write(content)
            
            self.logger.info(f"Created result summary: {summary_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"Error creating result summary for {task_id}: {e}")
            return False 